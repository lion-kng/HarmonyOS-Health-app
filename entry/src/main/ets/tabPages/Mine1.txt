import { DataService } from "../data_base/data_base";
import { AppStorageV2 } from "@kit.ArkUI";
import { TargetClass } from "../entity/target_class";

@Entry
@Component
export struct Mine1 {
  context: Context = getContext(this) as Context
  data_service: DataService = AppStorageV2.connect(DataService, "data_service", () => new DataService(this.context))!
  @State loadingProgress: number = 0
  @State isLoading: boolean = true

  @StorageLink('target_info') target_info:TargetClass=new TargetClass()

  @State sleep_hours: number = 0
  @State sleep_minutes: number = 0;
  @State sleep_time: Date = new Date()

  @StorageLink('water_range') water_range: number[] = []
  @StorageLink('water_interval') water_interval: number = 500
  @State water_cup: number = -1


  async aboutToAppear(): Promise<void> {
    this.isLoading = true

    // this.data_service.target_insert_data()



    // this.target_info=await this.data_service.target_query_data()
    // this.target_info.water_interval=10
    // this.data_service.target_update_data(this.target_info)

    this.target_info=await this.data_service.target_query_data()
    console.info(`[target]  ${JSON.stringify(this.target_info)}`)
    this.sleep_hours = Math.floor(this.target_info.sleep_target / 60)
    this.sleep_minutes = this.target_info.sleep_target % 60

    this.water_interval=this.target_info.water_interval

    //饮水数据转换
    this.get_water_range()
    this.water_cup = Math.floor(this.target_info.water_target / this.water_interval)


    this.isLoading=false
  }

  build() {
    if (this.isLoading) {
      this.ProgressLoading() // 显示加载动画
    }
    else {

      Column() {
        // 头像栏
        Row() {
          // 头像
          Image($r('app.media.head'))
            .width(60)
            .height(60)
            .borderRadius(5)
            .margin({ right: 18 ,left:18})

          // 用户名
          Column() {
            Text('userName')
              .fontSize(28)
              .fontWeight("bold")
              .fontColor(Color.Black)
              .margin({ top: -20 })

            Text("点击查看资料")
              .fontSize(12)
              .fontColor(Color.Gray)
          }
          .layoutWeight(1)  // 新增权重设置
          .alignItems(HorizontalAlign.Start)


          Image($r('app.media.more'))
            .width(50)
            .height(50)
            .margin({
              top: 20,
              left: 'auto'  // 新增左侧自动margin实现右对齐
            })
            .alignSelf(ItemAlign.Center) // 修正此处
            .onClick(() => {
              // 点击事件处理
            })


        }//row头像栏
        .alignItems(VerticalAlign.Center)
        .height(200)
        .width('100%')
        // .padding({ left: 15, right: 15 })
        .backgroundColor(Color.White)
        .expandSafeArea([SafeAreaType.SYSTEM],[SafeAreaEdge.TOP, SafeAreaEdge.BOTTOM])
        .border({
          width: {
            bottom: 1
          },
          color: {
            bottom: "#EEE"
          }
        })
        // .backgroundColor(Color.Pink)


        //步数栏
        Row() {
          Text('步数目标')
            .fontSize(32)
            .fontColor(Color.Green)
            .margin({ left: 18 })

          Row() {
            TextInput({ text: this.target_info.step_target.toString() })
              .type(InputType.Number)
              .fontSize(32)
              .fontColor(Color.Green)
              .textAlign(TextAlign.Center)
              .width('50%')
              .height('80%')
              .onSubmit(async (enterKey: EnterKeyType, event: SubmitEvent) => {
                this.target_info.step_target = Number(event.text);
                await this.data_service.target_update_data(this.target_info)
              })

            Text('步')
              .fontSize(32)
              .fontColor(Color.Green)
              .margin({ right: 8, left: 8 })
          }
          .justifyContent(FlexAlign.End)
          .layoutWeight(1)
        }
        .height(75)
        .width('100%')
        .backgroundColor(Color.White)
        .margin({top: -20})


        // 睡眠栏
        Row() {
          Text('睡眠目标')
            .fontSize(32)
            .fontColor('#6968d3')
            .margin({ left: 18 })

          Row({ space: 5 }) {
            Text(this.sleep_hours.toString())
              .fontSize(32)
              .width('20%')
              .textAlign(TextAlign.Center)
              .fontColor('#6968d3')
              .onClick(() => {
                TimePickerDialog.show({
                  selected: this.sleep_time,
                  useMilitaryTime: true,
                  onAccept: async (value: TimePickerResult) => {
                    this.sleep_hours = value.hour
                    this.sleep_minutes = value.minute
                    this.target_info.sleep_target = this.sleep_hours * 60 + this.sleep_minutes
                    await this.data_service.target_update_data(this.target_info)
                    this.sleep_time.setHours(value.hour, value.minute)
                  }
                })
              })
            Text('h')
              .fontSize(32)
              .fontColor('#6968d3')

            Text(this.sleep_minutes.toString())
              .fontSize(32)
              .width('20%')
              .textAlign(TextAlign.Center)
              .fontColor('#6968d3')
              .onClick(() => {
                TimePickerDialog.show({
                  selected: this.sleep_time,
                  useMilitaryTime: true,
                  onAccept: async (value: TimePickerResult) => {
                    this.sleep_hours = value.hour
                    this.sleep_minutes = value.minute
                    this.target_info.sleep_target = this.sleep_hours * 60 + this.sleep_minutes
                    await this.data_service.target_update_data(this.target_info)
                    this.sleep_time.setHours(value.hour, value.minute)
                  }
                })
              })
            Text('m')
              .fontSize(32)
              .fontColor('#6968d3')
              .margin({ right: 8 })
          }
          .justifyContent(FlexAlign.End)
          .layoutWeight(1)
        }
        .height(75)
        .width('100%')
        .backgroundColor(Color.White)
        .margin({top: 10,bottom: 10})


        Row() {
          Text('饮水')
            .fontSize(32)
            .fontColor('#4682B4')
            .margin({ left: 18 })

          Row({ space: 5 }) {

            Text(this.target_info.water_target.toString())
              .backgroundColor('#f3f3f3')
              .fontSize(32)
              .width('30%')
              .height('80%')
              .borderRadius(15)
              .textAlign(TextAlign.Center)
              .fontColor('#4682B4')
              .onClick(() => {
                TextPickerDialog.show({
                  range: this.water_range.map(item => item.toString()),
                  selected: this.water_cup,
                  onAccept: async (value: TextPickerResult) => {
                    this.water_cup = Number(value.value) / this.water_interval;
                    this.target_info.water_target = this.water_cup * this.water_interval
                    await this.data_service.target_update_data(this.target_info)
                  }
                })
              })


            // TextInput({ text: this.target_info.water_target.toString() })
            //   // .backgroundColor('#f3f3f3')
            //   .type(InputType.Number)
            //   .fontSize(32)
            //   .fontColor('#4682B4')
            //   .textAlign(TextAlign.Center)
            //   .width('30%')
            //   .height('80%')
            //   .onSubmit(async (enterKey: EnterKeyType, event: SubmitEvent) => {
            //     this.target_info.step_target = Number(event.text);
            //     await this.data_service.target_update_data(this.target_info)
            //   })


            Text('ml')
              .fontSize(32)
              .fontColor('#4682B4')
              .margin({ right: 8 })
          }
          .justifyContent(FlexAlign.End)
          .layoutWeight(1)
        }
        .height(75)
        .width('100%')
        .backgroundColor(Color.White)
        // .onClick(async () => {
        //   this.water_cup = Math.min(this.water_cup + 1, Math.floor(3500 / this.water_interval))
        //   this.water_info.water = this.water_cup * this.water_interval
        //   await this.data_service.water_update_data(this.today, this.water_info)
        // })


        Divider()
        //杯子容量
        Row() {
          Text('杯子容量')
            .fontSize(32)
            .fontColor('#4682B4')
            .margin({ left: 18 })

          Row() {
            TextInput({ text: this.target_info.water_interval.toString() })
              .type(InputType.Number)
              .fontSize(32)
              .fontColor('#4682B4')
              .textAlign(TextAlign.Center)
              .width('45%')
              .height('80%')
              .onSubmit(async (enterKey: EnterKeyType, event: SubmitEvent) => {
                this.water_interval = Number(event.text);
                this.target_info.water_interval = Number(event.text);
                await this.data_service.target_update_data(this.target_info)
                this.get_water_range()
              })

            Text('ml')
              .fontSize(32)
              .fontColor('#4682B4')
              .margin({ right: 8, left: 8 })
          }
          .justifyContent(FlexAlign.End)
          .layoutWeight(1)
        }
        .height(75)
        .width('100%')
        .backgroundColor(Color.White)



        // 其他内容...
      }//column
      .height('100%')

    }//else

  }//build






  get_water_range(): void {
    this.water_range = []
    for (let i = 0; i <= 3500; i += this.water_interval) {
      this.water_range.push(i)
    }
  }


  @Builder
  ProgressLoading() {
    Column() {
      Stack() {
        // 背景圆环
        Circle()
          .width(80)
          .height(80)
          .fill(Color.Transparent)
          .stroke('#EEE')
          .strokeWidth(8)

        // 进度圆环
        Shape() {
          Path()
            .width(80)
            .height(80)
            .commands(`M-40 0 A40 40 0 1 1 40 0`) // 基础圆弧路径
        }
        .stroke(Color.Blue)
        .fill(Color.Transparent)
        .strokeWidth(8)
        .strokeLineCap(LineCapStyle.Round)
        .rotate({
          angle: this.loadingProgress * 3.6 - 90, // 将进度转换为旋转角度
          centerX: '50%',
          centerY: '50%'
        })
      }

      Text(`${Math.floor(this.loadingProgress)}%`)
        .fontSize(20)
        .margin({ top: 16 })
    }
    .onAppear(() => {
      animateTo({ duration: 1000 }, () => this.loadingProgress = 100)
    })
  }





}