import { relationalStore } from "@kit.ArkData";
import { common } from "@kit.AbilityKit";
import {Context} from "@ohos.arkui.UIContext"
import { BusinessError } from "@kit.BasicServicesKit";
import { StepClass } from "../entity/step_class";
import { SleepClass } from "../entity/sleep_class";
import { WaterClass } from "../entity/water_class";
import { TargetClass } from "../entity/target_class";


export class DataService {

  // 定义数据库
  private store: relationalStore.RdbStore | undefined = undefined;
  //获取上下文
  private context :Context

  constructor(context:Context) {
    this.context=context
  }

  async initialize(){
    try{
      console.info(`初始化数据库`)
      await this.creat_rdb_store()
      await this.creat_step_table()
      await this.creat_sleep_table()
      await this.creat_water_table()
      // await this.upgradeStepTable()

      // await this.deleteTargetTable();
      await this.create_target_table()

    }catch (err) {
      console.error(`Database init failed: ${err.message}`);
    }
  }


  async deleteTargetTable(): Promise<void> {
    console.info('[目标表] 开始删除表');

    if (!this.store) {
      console.error('[目标表] 数据库未初始化');
      return;
    }

    try {
      // 使用 DROP TABLE 语句彻底删除表
      await this.store.executeSql("DROP TABLE IF EXISTS target_table");
      console.info('[目标表] 表删除成功');
    } catch (err) {
      console.error(`[目标表] 删除失败: ${(err as BusinessError).message}`);
      throw new Error(`目标表删除失败: ${(err as BusinessError).message}`);
    }
  }



  async creat_rdb_store() : Promise<void>{
    try {
      console.info(`[test]  开始创建数据库`);
      const STORE_CONFIG: relationalStore.StoreConfig = {
        name: "RdbTest.db",
        securityLevel: relationalStore.SecurityLevel.S3
      };
      console.info(`[test]开始创建数据库1`);

      if (!this.context) {
        throw new Error("[test]数据 context is undefined");
      }


      // 使用 await 等待数据库创建完成
      this.store = await relationalStore.getRdbStore(this.context, STORE_CONFIG);
      console.info(`[test]数据   创建数据库成功`);
      console.info(`[DEBUG] 数据库路径：${this.context.databaseDir}`);

    } catch (e) {
      console.error("创建数据库失败:", e);
      //throw e; // 将错误抛出，让 initialize() 的 catch 捕获
    }
  }


  async upgradeStepTable():Promise<void>{
    if (!this.store) {
      throw new Error("[test]数据库未创建，无法建表");
    }
    try {

      // 检查是否存在新字段
      // const columns: string[] = await this.store.getTableColumns("step_table");
      // if (!columns.includes("distance")) {
        await this.store.executeSql("ALTER TABLE step_table ADD COLUMN distance REAL DEFAULT 0.0");
      // }
      // if (!columns.includes("calorie")) {
        await this.store.executeSql("ALTER TABLE step_table ADD COLUMN calorie INTEGER DEFAULT 0");
      // }
    } catch (err) {
      console.error("表结构升级失败:", err);
    }
  }


  async create_target_table(): Promise<void> {
    if (!this.store) {
      throw new Error("[test]数据库未创建，无法建表");
    }

    const createTableSql = `
  CREATE TABLE IF NOT EXISTS target_table (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    step_target INTEGER DEFAULT 0,
    distance_target REAL DEFAULT 0.0,
    calorie_target INTEGER DEFAULT 0,
    sleep_target INTEGER DEFAULT 0,
    deep_target INTEGER DEFAULT 0,
    light_target INTEGER DEFAULT 0,
    rem_target INTEGER DEFAULT 0,
    water_target INTEGER DEFAULT 0,
    water_interval INTEGER DEFAULT 10  -- 新增列
  )`;


    try {
      await this.store.executeSql(createTableSql);
      console.log('Target table created successfully');
    } catch (err) {
      console.error(`Failed to create table, error: ${err}`);
      throw new Error('Database creation failed');
    }
  }



  async creat_step_table(): Promise<void> {
    if (!this.store) {
      throw new Error("[test]数据库未创建，无法建表");
    }

    const sql_creat = `CREATE TABLE IF NOT EXISTS step_table (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT NOT NULL UNIQUE,
    step INTEGER DEFAULT 0,
    distance REAL DEFAULT 0.0,   // REAL类型（单位：千米）
    calorie INTEGER DEFAULT 0     // 卡路里字段（单位：千卡）
  )`;

    try {
      // 使用 await 等待建表操作
      await this.store.executeSql(sql_creat);
      console.info('[test]数据   Create table successfully.');
    } catch (err) {
      console.error(`[test]数据   creat table failed: ${err.message}`);
      //throw err;
    }
  }

  async creat_sleep_table(): Promise<void> {
    if (!this.store) {
      throw new Error("数据库未创建，无法建表");
    }

    const sql_creat = `CREATE TABLE IF NOT EXISTS sleep_table (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  date TEXT NOT NULL UNIQUE,        -- 日期标识(与类中date字段对应)
  sleep INTEGER DEFAULT 0,          -- 睡眠总时长(分钟)
  wake INTEGER DEFAULT 0,           -- 清醒次数
  deep INTEGER DEFAULT 0,           -- 深度睡眠时长(分钟)
  light INTEGER DEFAULT 0,          -- 浅度睡眠时长(分钟)
  rem INTEGER DEFAULT 0             -- REM睡眠时长(分钟)
  )`;

    try {
      // 使用 await 等待建表操作
      await this.store.executeSql(sql_creat);
      console.info('数据   Create table successfully.');
    } catch (err) {
      console.error(`数据   creat table failed: ${err.message}`);
      //throw err;
    }
  }

  async creat_water_table(): Promise<void> {
    if (!this.store) {
      throw new Error("数据库未创建，无法建表");
    }

    const sql_creat = `CREATE TABLE IF NOT EXISTS water_table (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  date TEXT NOT NULL UNIQUE,   -- 日期标识(格式：YYYY-MM-DD)
  water INTEGER DEFAULT 0      -- 当日饮水量（单位：毫升）
  )`;

    try {
      // 使用 await 等待建表操作
      await this.store.executeSql(sql_creat);
      console.info('数据   Create table successfully.');
    } catch (err) {
      console.error(`数据   creat table failed: ${err.message}`);
      //throw err;
    }
  }







  // async step_insert_data(today:string) :Promise<void> {
  //   console.info(`[test]开始插入数据`);
  //   // 生成当天日期（格式：YYYY-MM-DD）
  //   // const today = new Date().toISOString().split('T')[0];
  //   //查询
  //   if (this.store !== undefined) {
  //     let predicates = new relationalStore.RdbPredicates("step_table");
  //     predicates.equalTo("date", today);
  //
  //     console.info(`[test]插入数据，先进行查询`);
  //
  //     const resultSet=await this.store!.query(predicates, ["ID", "date", "step"])
  //
  //     if(resultSet?.rowCount===0){
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "date": today,
  //         "step":0,
  //       }
  //       await this.store!.insert("step_table",valueBucket)
  //       console.info(`[test]插入数据：${JSON.stringify(valueBucket)}`);
  //     }
  //   }
  //   console.info(`[test]插入数据完成`);
  // }

  async target_insert_data(): Promise<void> {
    console.info('[target] 开始插入');

    if (!this.store) {
      console.error('[target] 数据库未初始化');
      return;
    }

    try {
      // 创建无条件查询（查询全表）
      const predicates = new relationalStore.RdbPredicates("target_table");
      predicates.equalTo("id", 1);
      const resultSet = await this.store.query(predicates, ["id"]);

      if (resultSet.rowCount === 0) {
        const valueBucket: relationalStore.ValuesBucket = {
          step_target: 0,
          distance_target: 0.0,
          calorie_target: 0,
          sleep_target: 0,
          deep_target: 0,
          light_target: 0,
          rem_target: 0,
          water_target: 0,
          water_interval:100
        };

        await this.store.insert("target_table", valueBucket);
        console.info('[target] 插入数据：' + JSON.stringify(valueBucket))

      } else {
        console.info('[target] 已有数据，跳过插入');
      }
    } catch (err) {
      console.error(`[target] 操作失败: ${(err as BusinessError).message}`);
      throw new Error(`[target]  目标数据插入失败: ${(err as BusinessError).message}`);
    }
  }



  async step_insert_data(today: string): Promise<void> {
    console.info(`[步数数据] 开始插入 ${today}`);

    if (!this.store) {
      console.error('[步数数据] 数据库未初始化');
      return;
    }

    try {
      const predicates = new relationalStore.RdbPredicates("step_table");
      predicates.equalTo("date", today);

      const resultSet = await this.store.query(predicates, ["id"]);

      if (resultSet.rowCount === 0) {
        const valueBucket: relationalStore.ValuesBucket = {
          "date": today,
          "step": 0,
          "distance":0.0,
          "calorie":0
        };

        await this.store.insert("step_table", valueBucket);
        console.info(`[步数数据] 初始化记录成功: ${JSON.stringify(valueBucket)}`);
      }
    } catch (err) {
      console.error(`[步数数据] 插入失败: ${(err as BusinessError).message}`);
      throw new Error(`数据插入失败: ${(err as BusinessError).message}`);
    }
  }


  // async sleep_insert_data() :Promise<void> {
  //   console.info(`开始插入数据`);
  //   // 生成当天日期（格式：YYYY-MM-DD）
  //   const today = new Date().toISOString().split('T')[0];
  //
  //
  //   //查询
  //
  //   if (this.store !== undefined) {
  //     let predicates = new relationalStore.RdbPredicates("sleep_table");
  //     predicates.equalTo("date", today);
  //
  //     console.info(`开始插入数据1`);
  //
  //     const resultSet=await this.store!.query(predicates, ["ID", "date", "sleep", "wake",
  //       "deep", "light", "rem"])
  //
  //     //如果没有数据就插入
  //     if(resultSet?.rowCount===0){
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "date": today,
  //         "sleep":0,
  //         "wake":0,
  //         "deep":0,
  //         "light":0,
  //         "rem":0,
  //       }
  //       console.info(`插入数据：${JSON.stringify(valueBucket)}`);
  //       await this.store!.insert("sleep_table",valueBucket)
  //     }
  //   }
  //   console.info(`插入数据完成`);
  // }


  async sleep_insert_data(today: string): Promise<void> {
    console.info(`[睡眠数据] 开始插入 ${today}`);

    if (!this.store) {
      console.error('[睡眠数据] 数据库未初始化');
      return;
    }

    try {
      const predicates = new relationalStore.RdbPredicates("sleep_table");
      predicates.equalTo("date", today);

      const resultSet = await this.store.query(predicates, ["id"]);

      if (resultSet.rowCount === 0) {
        const valueBucket: relationalStore.ValuesBucket = {
          "date": today,
          "sleep": 0,
          "wake": 0,
          "deep": 0,
          "light": 0,
          "rem": 0
        };

        await this.store.insert("sleep_table", valueBucket);
        console.info(`[睡眠数据] 初始化记录成功: ${JSON.stringify(valueBucket)}`);
      }
    } catch (err) {
      console.error(`[睡眠数据] 插入失败: ${(err as BusinessError).message}`);
      throw new Error(`睡眠数据插入失败: ${(err as BusinessError).message}`);
    }
  }


  // async water_insert_data() :Promise<void> {
  //   console.info(`开始插入数据`);
  //   // 生成当天日期（格式：YYYY-MM-DD）
  //   const today = new Date().toISOString().split('T')[0];
  //
  //
  //   //查询
  //
  //   if (this.store !== undefined) {
  //     let predicates = new relationalStore.RdbPredicates("water_table");
  //     predicates.equalTo("date", today);
  //
  //     console.info(`开始插入数据1`);
  //
  //     const resultSet=await this.store!.query(predicates, ["ID", "date", "water"])
  //
  //     if(resultSet?.rowCount===0){
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "date": today,
  //         "water":0,
  //       }
  //       console.info(`插入数据：${JSON.stringify(valueBucket)}`);
  //
  //
  //       await this.store!.insert("water_table",valueBucket)
  //     }
  //   }
  //   console.info(`开始插入数据2`);
  // }

  async water_insert_data(today: string): Promise<void> {
    console.info(`[饮水数据] 开始插入 ${today}`);

    if (!this.store) {
      console.error('[饮水数据] 数据库未初始化');
      return;
    }

    try {
      const predicates = new relationalStore.RdbPredicates("water_table");
      predicates.equalTo("date", today);

      const resultSet = await this.store.query(predicates, ["id"]);

      if (resultSet.rowCount === 0) {
        const valueBucket: relationalStore.ValuesBucket = {
          "date": today,
          "water": 0
        };

        await this.store.insert("water_table", valueBucket);
        console.info(`[饮水数据] 初始化记录成功: ${JSON.stringify(valueBucket)}`);
      }
    } catch (err) {
      console.error(`[饮水数据] 插入失败: ${(err as BusinessError).message}`);
      throw new Error(`饮水数据插入失败: ${(err as BusinessError).message}`);
    }
  }



  // insert_data() :void {
  //   console.info(`开始插入数据`);
  //   // 生成当天日期（格式：YYYY-MM-DD）
  //   const today = new Date().toISOString().split('T')[0];
  //
  //
  //   //查询
  //
  //   if (this.store !== undefined) {
  //     let predicates = new relationalStore.RdbPredicates("step_table");
  //     predicates.equalTo("date", today);
  //
  //     console.info(`开始插入数据1`);
  //
  //     const resultSet=this.store!.querySync(predicates, ["ID", "date", "step"])
  //
  //     if(resultSet?.rowCount===0){
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "date": today,
  //         "step":0,
  //       }
  //       console.info(`插入数据：${JSON.stringify(valueBucket)}`);
  //
  //
  //       this.store!.insert("step_table",valueBucket)
  //
  //
  //
  //     }
  //
  //
  //
  //
  //   }
  //   console.info(`开始插入数据2`);
  // }


  // async step_query_data (today :string): Promise<StepClass>{
  //   console.info(`[test]开始查询数据`);
  //   let step_info=new StepClass();
  //
  //
  //   if(this.store!=undefined){
  //
  //     let predicates = new relationalStore.RdbPredicates("step_table");
  //     predicates.equalTo("date", today);
  //
  //
  //     console.info(`[test]数据库存在，开始查询数据1`);
  //     const resultSet=await this.store?.query(predicates, ["ID", "date", "step"])
  //
  //     if(resultSet?.rowCount===1){
  //       resultSet.goToFirstRow();
  //       step_info.date=resultSet.getString(resultSet.getColumnIndex("date"));
  //       step_info.step=resultSet.getLong(resultSet.getColumnIndex("step"));
  //       console.info(`[test]查询数据成功：${JSON.stringify(step_info)}`);
  //     }else if(resultSet.rowCount===0){
  //         console.info("[test]查询数据中发现原来没有数据")
  //       //   const valueBucket: relationalStore.ValuesBucket = {
  //       //     "date": today,
  //       //     "step":11,
  //       //   }
  //       //   await this.store?.insert("step_table",valueBucket)
  //       // console.info(`[test]插入数据成功：${JSON.stringify(valueBucket)}`)
  //       }else{
  //       console.info(`[test]today数据不是一/零条发生了错误！today是${resultSet?.rowCount}`)
  //     }
  //
  //   }
  //   console.info(`[test]  查询数据完成`);
  //
  //   return step_info;
  // }


  async target_query_data(): Promise<TargetClass> {
    const targetInfo = new TargetClass();

    if (!this.store) {
      console.error('[目标数据] 数据库未初始化');
      return targetInfo;
    }

    try {
      // 不添加条件直接查询全表
      const predicates = new relationalStore.RdbPredicates("target_table");
      predicates.equalTo("id", 1);
      const resultSet = await this.store.query(predicates, ["*"]);

      switch (resultSet.rowCount) {
        case 0:
          console.warn('[target] 未找到记录，返回默认值');
          // 可选：自动插入初始记录
          // await this.init_target_data();
          this.target_insert_data()
          break;

        case 1:

          resultSet.goToFirstRow();
          targetInfo.step_target = resultSet.getLong(resultSet.getColumnIndex("step_target"));
          targetInfo.distance_target = resultSet.getDouble(resultSet.getColumnIndex("distance_target"));
          targetInfo.calorie_target = resultSet.getLong(resultSet.getColumnIndex("calorie_target"));
          targetInfo.sleep_target = resultSet.getLong(resultSet.getColumnIndex("sleep_target"));
          targetInfo.deep_target = resultSet.getLong(resultSet.getColumnIndex("deep_target"));
          targetInfo.light_target = resultSet.getLong(resultSet.getColumnIndex("light_target"));
          targetInfo.rem_target = resultSet.getLong(resultSet.getColumnIndex("rem_target"));
          targetInfo.water_target = resultSet.getLong(resultSet.getColumnIndex("water_target"));
          targetInfo.water_interval = resultSet.getLong(resultSet.getColumnIndex("water_interval"));
          console.info(`[target] 查询数据成功：${JSON.stringify(targetInfo)}`)
          break;

        default:
          console.error(`[target] 查询中 发现异常记录数: ${resultSet.rowCount} 返回默认值`);
          // resultSet.goToFirstRow();
        // 同上字段赋值逻辑...
          break;
      }
    } catch (err) {
      console.error(`[target] 查询失败: ${(err as BusinessError).message}`);
    }

    return targetInfo;
  }




  async step_query_data(today: string): Promise<StepClass> {
    console.info(`[步数数据] 开始查询 ${today}`);
    const stepInfo = new StepClass();

    if (!this.store) {
      console.error('[步数数据] 数据库未初始化');
      return stepInfo;
    }

    try {
      const predicates = new relationalStore.RdbPredicates("step_table");
      predicates.equalTo("date", today);

      const resultSet = await this.store.query(predicates, ["*"]);

      if (resultSet.rowCount === 1) {
        resultSet.goToFirstRow();
        stepInfo.date = resultSet.getString(resultSet.getColumnIndex("date")) || today;
        stepInfo.step = resultSet.getLong(resultSet.getColumnIndex("step"));
        stepInfo.distance = resultSet.getDouble(resultSet.getColumnIndex("distance"))
        stepInfo.calorie = resultSet.getLong(resultSet.getColumnIndex("calorie"));


      } else {
        console.warn(`[步数数据] 异常记录数: ${resultSet.rowCount}`);
        await this.step_insert_data(today); // 自动修复缺失数据
      }
    } catch (err) {
      console.error(`[步数数据] 查询失败: ${(err as BusinessError).message}`);
    }

    console.info(`[步数数据] 查询结果: ${JSON.stringify(stepInfo)}`);
    return stepInfo;
  }


  async sleep_query_data(today: string): Promise<SleepClass> {
    console.info(`[睡眠数据] 开始查询 ${today}`);
    const sleepInfo = new SleepClass();

    if (!this.store) return sleepInfo;

    try {
      const predicates = new relationalStore.RdbPredicates("sleep_table");
      predicates.equalTo("date", today);

      const resultSet = await this.store.query(predicates, ["*"]);

      if (resultSet.rowCount === 1) {
        resultSet.goToFirstRow();
        sleepInfo.date = resultSet.getString(resultSet.getColumnIndex("date")) || today;
        sleepInfo.sleep = resultSet.getLong(resultSet.getColumnIndex("sleep"));
        sleepInfo.wake = resultSet.getLong(resultSet.getColumnIndex("wake"));
        sleepInfo.deep = resultSet.getLong(resultSet.getColumnIndex("deep"));
        sleepInfo.light = resultSet.getLong(resultSet.getColumnIndex("light"));
        sleepInfo.rem = resultSet.getLong(resultSet.getColumnIndex("rem"));
      } else {
        console.warn(`[睡眠数据] 异常记录数: ${resultSet.rowCount}`);
      }
    } catch (err) {
      console.error(`[睡眠数据] 查询失败: ${err.message}`);
    }
    return sleepInfo;
  }


  async water_query_data(today: string): Promise<WaterClass> {
    console.info(`[饮水数据] 开始查询 ${today}`);
    const waterInfo = new WaterClass();

    if (!this.store) return waterInfo;

    try {
      const predicates = new relationalStore.RdbPredicates("water_table");
      predicates.equalTo("date", today);

      const resultSet = await this.store.query(predicates, ["*"]);

      if (resultSet.rowCount === 1) {
        resultSet.goToFirstRow();
        waterInfo.date = resultSet.getString(resultSet.getColumnIndex("date")) || today;
        waterInfo.water = resultSet.getLong(resultSet.getColumnIndex("water"));
      } else {
        console.warn(`[饮水数据] 异常记录数: ${resultSet.rowCount}`);
      }
    } catch (err) {
      console.error(`[饮水数据] 查询失败: ${err.message}`);
    }
    return waterInfo;
  }



  // query_data (today :string): StepClass{
  //   console.info(`[DB]  开始查询数据`);
  //   let step_info=new StepClass();
  //
  //
  //   if(this.store!=undefined){
  //
  //     let predicates = new relationalStore.RdbPredicates("step_table");
  //     predicates.equalTo("date", today);
  //
  //
  //     console.info(`开始查询数据1`);
  //     const resultSet=this.store?.querySync(predicates, ["ID", "date", "step"])
  //
  //     if(resultSet?.rowCount===1){
  //       resultSet.goToFirstRow();
  //       step_info.date=resultSet.getString(resultSet.getColumnIndex("date"));
  //       step_info.step=resultSet.getLong(resultSet.getColumnIndex("step"));
  //     }else{
  //       console.info(`today数据不是一条发生了错误！today是${resultSet?.rowCount}`)
  //     }
  //
  //   }
  //   console.info(`[DB]  开始查询数据2`);
  //
  //   return step_info;
  // }

  // async step_update_data (today :string,step:number): Promise<void>{
  //   console.info(`[test]  开始更新数据${today}   ${step}`);
  //   if(this.store!==undefined){
  //
  //     console.info(`[test]  数据库已经有了，开始更新数据`);
  //     let predicates = new relationalStore.RdbPredicates("step_table");
  //     predicates.equalTo("date", today);
  //     try {
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "step":step,
  //       }
  //       // console.info(`[test]更新数据：`);
  //
  //       await this.store?.update(valueBucket,predicates)
  //       console.info(`[test]更新数据成功  ${JSON.stringify(valueBucket)}`);
  //
  //     } catch (err) {
  //       console.error(`[test]更新数据失败: ${err.message}`);
  //     }
  //
  //     console.info(`[test] 更新后开始再次查询`);
  //     const resultSet=await this.store?.query(predicates, ["ID", "date", "step"])
  //     resultSet.goToFirstRow() // 必须调用后才能读取数据
  //     console.info(`[test] 更新后再次查询结果 ${resultSet.getLong(resultSet.getColumnIndex("step"))}`);
  //   }
  //   console.info(`[test]  更新数据完成`);
  //
  // }


  async target_update_data(targetInfo: TargetClass): Promise<void> {
    console.info('[target] 开始更新');

    if (!this.store) {
      console.error('[target] 数据库未初始化');
      return;
    }

    try {
      console.info('[target] 数据库存在开始更新');
      // 构建更新数据集
      const valueBucket: relationalStore.ValuesBucket = {
        step_target: Math.max(0, targetInfo.step_target),
        distance_target: Math.max(0, targetInfo.distance_target),
        calorie_target: Math.max(0, targetInfo.calorie_target),
        sleep_target: Math.max(0, targetInfo.sleep_target),
        deep_target: Math.max(0, targetInfo.deep_target),
        light_target: Math.max(0, targetInfo.light_target),
        rem_target: Math.max(0, targetInfo.rem_target),
        water_target: Math.max(0, targetInfo.water_target),
        water_interval: Math.max(10, targetInfo.water_interval)
      };

      // 创建无条件predicates（更新全表）
      const predicates = new relationalStore.RdbPredicates("target_table");
      predicates.equalTo("id", 1);

      const affectedRows = await this.store.update(valueBucket, predicates);
      console.info(`[target] 更新完成，影响行数: ${affectedRows}`);

      // 处理更新结果
      if (affectedRows === 0) {
        console.warn('[target] 未找到记录   更新失败');
        // await this.insert_target_data();
        // await this.store.update(valueBucket, predicates);
      } else if (affectedRows > 1) {
        console.error(`[target] 异常更新行数: ${affectedRows}`);
      }

      console.info(`[target] 更新成功，影响行数: ${affectedRows}`);


    } catch (err) {
      console.error(`[目标数据] 更新失败: ${(err as BusinessError).message}`);
      throw new Error(`目标数据更新失败: ${(err as BusinessError).message}`);
    }
  }





  async step_update_data(today: string, step_info:StepClass): Promise<void> {
    console.info(`[步数数据] 开始更新 ${today} => ${step_info.step}`);

    if (!this.store) {
      console.error('[步数数据] 数据库未初始化');
      return;
    }

    try {
      // 数据校验
      const validatedStep = Math.max(0, step_info.step);


      const predicates = new relationalStore.RdbPredicates("step_table");
      predicates.equalTo("date", today);

      const valueBucket: relationalStore.ValuesBucket = {
        "step": validatedStep,
        "distance": step_info.distance,
        "calorie": step_info.calorie
      };

      const affectedRows = await this.store?.update(valueBucket, predicates);

      if (affectedRows === 0) {
        console.warn(`[步数数据] 未找到匹配记录，自动创建`);
        await this.step_insert_data(today);
        await this.store.update(valueBucket, predicates);
      }
      console.info(`[步数数据] 更新成功，影响行数: ${affectedRows}`);
      // 验证更新结果
      const verifyResult = await this.step_query_data(today);
      if (verifyResult.step !== validatedStep) {
        throw new Error(`数据验证失败，期望值: ${validatedStep}，实际值: ${verifyResult.step}`);
      }
      console.info(`[步数数据]数据验证成功`)
    } catch (err) {
      console.error(`[步数数据] 更新失败: ${(err as BusinessError).message}`);
      // throw err; // 向上抛出异常供调用方处理
    }
  }


  // 睡眠数据更新方法
  // async sleep_update_data(today: string, sleep: number, wake: number, deep: number,
  //   light: number, rem: number): Promise<void> {
  //
  //   console.info(`[睡眠数据] 开始更新`);
  //
  //   if (this.store != undefined) {
  //     const predicates = new relationalStore.RdbPredicates("sleep_table");
  //     predicates.equalTo("date", today);
  //
  //     try {
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "sleep": sleep,
  //         "wake": wake,
  //         "deep": deep,
  //         "light": light,
  //         "rem": rem
  //       };
  //
  //       console.info(`更新数据：${JSON.stringify(valueBucket)}`);
  //       await this.store?.update(valueBucket, predicates);
  //     } catch (err) {
  //       console.error(`[睡眠数据] 更新失败: ${err.message}`);
  //     }
  //   }
  //   console.info(`[睡眠数据] 更新完成`);
  // }

  async sleep_update_data(today: string, sleep_info:  SleepClass): Promise<void> {

    console.info(`[睡眠数据] 开始更新 ${today}`);

    if (!this.store) {
      console.error('[睡眠数据] 数据库未初始化');
      return;
    }

    try {
      // 数据校验
      const validatedData = new SleepClass();
      validatedData.date = today;
      validatedData.sleep = Math.max(0, sleep_info.sleep);
      validatedData.wake = Math.max(0, sleep_info.wake);
      validatedData.deep = Math.max(0, sleep_info.deep);
      validatedData.light = Math.max(0, sleep_info.light);
      validatedData.rem = Math.max(0, sleep_info.rem);

      const predicates = new relationalStore.RdbPredicates("sleep_table");
      predicates.equalTo("date", today);

      const valueBucket: relationalStore.ValuesBucket = {
        "sleep": validatedData.sleep,
        "wake": validatedData.wake,
        "deep": validatedData.deep,
        "light": validatedData.light,
        "rem": validatedData.rem
      };

      const affectedRows = await this.store.update(valueBucket, predicates);

      if (affectedRows === 0) {
        console.warn(`[睡眠数据] 未找到匹配记录，自动创建`);
        await this.sleep_insert_data(today);
        await this.store.update(valueBucket, predicates);
      }

      console.info(`[睡眠数据] 更新成功，影响行数: ${affectedRows}`);

      // 验证更新结果
      const verifyResult = await this.sleep_query_data(today);
      if (verifyResult.sleep !== validatedData.sleep ||
        verifyResult.wake !== validatedData.wake ||
        verifyResult.deep !== validatedData.deep ||
        verifyResult.light !== validatedData.light ||
        verifyResult.rem !== validatedData.rem) {
        throw new Error(`数据验证失败，请检查更新结果`);
      }
      console.info(`[睡眠数据] 数据验证成功 ${JSON.stringify(verifyResult)}`);

    } catch (err) {
      console.error(`[睡眠数据] 更新失败: ${(err as BusinessError).message}`);
      // throw err;
    }
  }


  // 饮水数据更新方法
  // async water_update_data(today: string, water: number): Promise<void> {
  //   console.info(`[饮水数据] 开始更新`);
  //
  //   if (this.store != undefined) {
  //     const predicates = new relationalStore.RdbPredicates("water_table");
  //     predicates.equalTo("date", today);
  //
  //     try {
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "water": water
  //       };
  //
  //       console.info(`更新数据：${JSON.stringify(valueBucket)}`);
  //       await this.store?.update(valueBucket, predicates);
  //
  //       // 数据校验（可选）
  //       if (water < 0) {
  //         console.warn(`饮水数据异常：负值 ${water}，已自动修正为0`);
  //         await this.store?.update({ "water": 0 }, predicates);
  //       }
  //
  //     } catch (err) {
  //       console.error(`[饮水数据] 更新失败: ${err.message}`);
  //     }
  //   }
  //
  //   console.info(`[饮水数据] 更新完成`);
  // }

  async water_update_data(today: string, water_info: WaterClass): Promise<void> {
    console.info(`[饮水数据] 开始更新 ${today}`);

    if (!this.store) {
      console.error('[饮水数据] 数据库未初始化');
      return;
    }

    try {
      // 数据校验

      const validatedWater = Math.max(0, water_info.water);

      const predicates = new relationalStore.RdbPredicates("water_table");
      predicates.equalTo("date", today);

      const valueBucket: relationalStore.ValuesBucket = {
        "water": validatedWater
      };

      const affectedRows = await this.store.update(valueBucket, predicates);

      if (affectedRows === 0) {
        console.warn(`[饮水数据] 未找到匹配记录，自动创建`);
        await this.water_insert_data(today);
        await this.store.update(valueBucket, predicates);
      }

      console.info(`[饮水数据] 更新成功，影响行数: ${affectedRows}`);

      // 验证更新结果
      const verifyResult = await this.water_query_data(today);
      if (verifyResult.water !== validatedWater) {
        throw new Error(`数据验证失败，期望值: ${validatedWater}，实际值: ${verifyResult.water}`);
      }
      console.info(`[饮水数据] 数据验证成功`);

    } catch (err) {
      console.error(`[饮水数据] 更新失败: ${(err as BusinessError).message}`);
      // throw err;
    }
  }




  // update_data (today :string,step:number): void{
  //   console.info(`[DB]  开始更新数据`);
  //   if(this.store!=undefined){
  //
  //     let predicates = new relationalStore.RdbPredicates("step_table");
  //     predicates.equalTo("date", today);
  //     try {
  //       const valueBucket: relationalStore.ValuesBucket = {
  //         "step":step,
  //       }
  //       console.info(`更新数据：${JSON.stringify(valueBucket)}`);
  //
  //       this.store!.update(valueBucket,predicates)
  //
  //     } catch (err) {
  //       console.error(`更新数据失败: ${err.message}`);
  //     }
  //
  //   }
  //   console.info(`[DB]  开始更新数据2`);
  //
  // }



  /**
   * 查询一周的步数数据
   * @param today 当前日期（格式：YYYY-MM-DD）
   * @returns 包含过去7天步数数据的数组
   */
  async step_query_data_week(today: string): Promise<StepClass[]> {
    console.info(`[步数数据] 开始查询一周数据，截止日期: ${today}`);
    const weekData: StepClass[] = [];

    if (!this.store) {
      console.error('[睡眠数据] 数据库未初始化');
      return [];
    }

    // 生成过去7天的日期
    for (let i = 6; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const formattedDate = date.toISOString().split('T')[0];


      try {
        const stepInfo = await this.step_query_data(formattedDate);
        weekData.push(stepInfo);
      } catch (err) {
        console.error(`[${formattedDate}] 数据获取失败: ${err.message}`);
        weekData.push(new StepClass(formattedDate)); // 推入空数据保持列表完整
      }

    }

    console.info(`[步数数据] 查询一周数据完成，结果: ${JSON.stringify(weekData)}`);
    return weekData;
  }

  // 在DataService类中添加
  async sleep_query_data_week(today: string): Promise<SleepClass[]> {
    console.info(`[睡眠数据] 开始查询一周数据，截止日期: ${today}`);
    const weekData: SleepClass[] = [];

    if (!this.store) {
      console.error('[睡眠数据] 数据库未初始化');
      return [];
    }

    // 生成过去7天的日期（包含今天）
    for (let i = 6; i >= 0; i--) {

      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const formattedDate = date.toISOString().split('T')[0];

      // 查询当天睡眠数据
      try {
        const sleepInfo = await this.sleep_query_data(formattedDate);
        weekData.push(sleepInfo);
      } catch (err) {
        console.error(`[${formattedDate}] 数据获取失败: ${err.message}`);
        weekData.push(new SleepClass(formattedDate)); // 推入空数据保持列表完整
      }
    }
    console.info(`[睡眠数据] 查询一周数据完成，结果条数: ${weekData.length}`);
    return weekData;
  }


  // 在DataService类中添加
  async water_query_data_week(today: string): Promise<WaterClass[]> {
    console.info(`[饮水数据] 开始查询一周数据，截止日期: ${today}`);
    const weekData: WaterClass[] = [];

    if (!this.store) {
      console.error('[饮水数据] 数据库未初始化');
      return [];
    }

    // 生成过去7天的日期（包含今天）
    for (let i = 6; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const formattedDate = date.toISOString().split('T')[0];

      try {
        const waterInfo = await this.water_query_data(formattedDate);
        weekData.push(waterInfo);
      } catch (err) {
        console.error(`[${formattedDate}] 数据获取失败: ${(err as BusinessError).message}`);
        weekData.push(new WaterClass(formattedDate)); // 保证返回数组长度始终为7
      }
    }

    console.info(`[饮水数据] 查询一周数据完成，结果条数: ${weekData.length}`);
    return weekData;
  }



}


